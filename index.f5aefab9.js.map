{"mappings":"AAAAA,SAASC,iBAAiB,oBAAoB,KAC5C,MAAMC,EAAgBF,SAASG,eAAe,iBACxCC,EAAeJ,SAASG,eAAe,gBACvCE,EAAeL,SAASG,eAAe,gBAEvCG,EAAWN,SAASO,cAAc,cAClCC,EAAeR,SAASO,cAAc,kBACtCE,EAAcT,SAASO,cAAc,iBACrCG,EAAQV,SAASW,iBAAiB,SAClCC,EAAYZ,SAASO,cAAc,wBACnCM,EAAYb,SAASO,cAAc,wBACnCO,EAAUd,SAASO,cAAc,sBACjCQ,EAAaf,SAASO,cAAc,yBACpCS,EAAUhB,SAASO,cAAc,sBACjCU,EAAcjB,SAASO,cAAc,UACrCW,EAAelB,SAASO,cAAc,WACtCY,EAAcnB,SAASO,cAAc,aACrCa,EAAcpB,SAASO,cAAc,SACrCc,EAAerB,SAASG,eAAe,iBACvCmB,EAAc,GACdC,EAAkB,GACxB,IAAIC,GAAe,EACfC,GAAa,EACbC,EAAgB,OACpB,MAAMC,EAAQ,GACd,IAAIC,EAAY,EACZC,GAAQ,EACRC,GAAa,EACbC,GAAiB,EACjBC,GAAY,EAgLhB,SAASC,EAAYC,EAAMC,GACzB,IAAK,IAAIC,EAAI,EAAGA,EAAIT,IAAaS,IAAK,CACpC,MAAMC,EAASrC,SAASsC,cAAc,OACtCD,EAAOE,QAAQC,GAAKJ,EACpBF,EAAKO,YAAYJ,GACjBF,EAAQO,KAAKL,E,EAwDjB,IAAIM,EACAC,EACAC,EAOJ,SAASC,IACPF,EAAcG,KACdF,EAAoBE,KAAKC,WAAWC,M,CAItC,SAASC,EAASC,GAChBA,EAAEC,gB,CAGJ,SAASC,EAAUF,GACjBA,EAAEC,gB,CAGJ,SAASE,I,CAIT,SAASC,IACP,IAAIC,EAAqBZ,EAAYa,UAAUjB,GAC3CkB,EAAYF,EAAmBG,MAAM,GAAG,GAExCC,EAAgBC,SAASL,EAAmBM,QAAO,IACnDC,EAAaH,EAAgBC,SAASd,KAAKR,QAAQC,IAKvD,IAAIwB,EAHyB,CAAC,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAGzFC,OAAO,EAAG,GAAKL,GAC9DM,EAHuB,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAGlGD,OAAO,EAAG,GAAKL,GAO9D,GALAO,kBAAoBN,SAASlB,EAA0BmB,QAAO,IAE9DC,GAA0BI,kBAGtB3C,IAAiBwC,EAAwBI,SAASL,GACpD,IAAK,IAAI3B,EAAE,EAAGA,EAAIS,EAAmBT,IAAK,CACxC,IAAIiC,EACM,IAANjC,IAASiC,EAAiB,SAC1BjC,IAAMS,EAAoB,IAAGwB,EAAiB,OAClD/C,EAAYuC,SAASd,KAAKR,QAAQC,IAAM2B,kBAAoB/B,GAAGkC,UAAUC,IAAI,QAAS,aAAcF,EAAgBX,E,KAIjH,IAAKlC,GAAiB0C,EAAsBE,SAASL,GAOrD,OANL,IAAK,IAAIS,EAAE,EAAGA,EAAI3B,EAAmB2B,IAAK,CACxC,IAAIC,EACM,IAAND,IAASC,EAAiB,SAC1BD,IAAM3B,EAAoB,IAAG4B,EAAiB,OAClDnD,EAAYuC,SAASd,KAAKR,QAAQC,IAAM2B,kBAAoBxC,EAAM6C,GAAGF,UAAUC,IAAI,QAAS,WAAYE,EAAgBf,E,CAErH,CAEPjD,EAAYiE,YAAY9B,GACpBnC,EAAYF,cAAc,WAAUwB,GAAiB,E,CAG3D,SAAS4C,I,CAKT,SAASC,EAAcC,GACrBxD,EAAayD,MAAMC,QAAU,OAC1BtD,IACCI,IACFgD,EAAOG,KAAK,gBACZnD,GAAQ,EACRoD,EAAYrD,IAGXE,IACoB,SAAlBJ,IACDP,EAAY+D,UAAY,UACxBlF,SAASmF,KAAKb,UAAUC,IAAI,WAC5BvE,SAASmF,KAAKb,UAAUc,OAAO,cAEZ,UAAlB1D,IACDP,EAAY+D,UAAY,aACxBlF,SAASmF,KAAKb,UAAUC,IAAI,aAC5BvE,SAASmF,KAAKb,UAAUc,OAAO,a,CAKrC,SAASH,EAAYI,GACnB,IAAIC,EAAS,KAAKzB,SAASwB,GAAO,IAClCrF,SAASO,cAAc,GAAG+E,YAAiBhB,UAAUiB,OAAO,S,CAI9D,SAASC,IACH/D,IACkB,SAAlBC,IACFP,EAAY+D,UAAY,UACxBlF,SAASmF,KAAKb,UAAUC,IAAI,WAC5BvE,SAASmF,KAAKb,UAAUc,OAAO,aAC/B7D,EAAgBkE,SAAQpD,GAAUA,EAAOpC,iBAAiB,SAAS,SAASkD,GAC1EnB,EAAYK,EAAOE,QAAQC,GAC3BkD,EAAarD,EAAOiC,U,OAGF,UAAlB5C,IACFP,EAAY+D,UAAY,eACxBS,WAAWC,EAAS,M,CAvTxB3D,EAAY3B,EAAUgB,GACtBW,EAAYzB,EAAce,GAGT,iBAAbsE,SACFC,oBAMF,WAGE,MAAMjB,EAASkB,GAAG,QAAUC,OAAOC,SAASC,SAAW,SAoGvD,SAASC,EAA8Bd,GACrC,IAAIC,EAAS,KAAKzB,SAASwB,GAAO,IAClCrF,SAASO,cAAc,GAAG+E,gBAAqBhB,UAAUiB,OAAO,UAC7D1B,SAASwB,KAASzD,IAAW5B,SAASO,cAAc+E,GAAQR,MAAMsB,WAAa,O,CArGpFC,QAAQC,KAAK,sCAEbjG,EAAaJ,iBAAiB,UAAUsG,IACtCA,EAAMnD,gBAAgB,IAGxBhD,EAAaH,iBAAiB,SAASsG,IACrC1B,EAAOG,KAAK,eAAgB9E,EAAcsG,OAC1CtG,EAAcsG,MAAQ,EAAE,IAK1B3B,EAAO4B,GAAG,iBAAiBpB,KACb,IAARA,EACFjE,EAAY8D,UAAY,6BAExBtD,EAAYiC,SAASwB,GACJ,IAAdzD,IAAiBF,EAAgB,SAEpC2E,QAAQK,IAAI9E,GAGZiD,EAAOG,KAAK,iB,IAKhBH,EAAO4B,GAAG,qBAAqBpB,IAC7BgB,QAAQK,IAAI,iBAAiBrB,mCAC7Bc,EAA8Bd,EAAI,IAIpCR,EAAO4B,GAAG,eAAepB,IACvBvD,GAAa,EACbmD,EAAYI,GACRxD,IACF+C,EAAcC,GACdxD,EAAayD,MAAMC,QAAU,O,IAKjCF,EAAO4B,GAAG,iBAAiBE,IACzBA,EAAQlB,SAAQ,CAACmB,EAAGxE,KACfwE,EAAEC,WAAWV,EAA8B/D,GAC3CwE,EAAE/E,QACHoD,EAAY7C,GACTA,IAAM6C,IAAanD,GAAa,G,GAErC,IAIJ+C,EAAO4B,GAAG,WAAW,KACnBrF,EAAY8D,UAAY,iFAAmF,IAG7GL,EAAO4B,GAAG,0BAA2BK,IACnC,MAAMC,EAAU/G,SAASO,cAAc,gBACvCwG,EAAQC,UAAY,UAAUF,IAC9BnB,YAAW,IAAMoB,EAAQC,UAAY,IAAI,KAAK,IAIhD/F,EAAYhB,iBAAiB,SAAS,KACjC8B,GACDX,EAAY8D,UAAY,GACxBN,EAAcC,IAEXzD,EAAY8D,UAAY,mDAAkD,IAIjF3D,EAAgBkE,SAAQpD,IACtBA,EAAOpC,iBAAiB,SAAS,KACV,SAAlByB,GAA4BG,GAASC,IACtCE,EAAYK,EAAOE,QAAQC,GAC3BqC,EAAOG,KAAK,OAAQhD,G,GAEtB,IAIJ6C,EAAO4B,GAAG,QAAQjE,IAChBoD,EAAQpD,GACR,MAAMH,EAASf,EAAYkB,GAC3BqC,EAAOG,KAAK,aAAc3C,EAAOiC,WACjCM,EAAcC,EAAO,IAIvBA,EAAO4B,GAAG,cAAcnC,IACtBoB,EAAapB,GACbM,EAAcC,EAAO,G,CAxGvBoC,GAmLF/F,EAAajB,iBAAiB,SAtB9B,WACE,OAAIuB,GACFZ,EAAU0D,UAAUiB,OAAO,gCAC3B1E,EAAUyD,UAAUiB,OAAO,gCAC3BzE,EAAQwD,UAAUiB,OAAO,8BACzBxE,EAAWuD,UAAUiB,OAAO,iCAC5BvE,EAAQsD,UAAUiB,OAAO,mCACzB/D,GAAe,IAIZA,OAAL,GACEZ,EAAU0D,UAAUiB,OAAO,gCAC3B1E,EAAUyD,UAAUiB,OAAO,gCAC3BzE,EAAQwD,UAAUiB,OAAO,8BACzBxE,EAAWuD,UAAUiB,OAAO,iCAC5BvE,EAAQsD,UAAUiB,OAAO,mCACzB/D,GAAe,G,IAQnBd,EAAM+E,SAAQyB,GAAQA,EAAKjH,iBAAiB,YAAa6C,KACzDxB,EAAYmE,SAAQpD,GAAUA,EAAOpC,iBAAiB,YAAa6C,KACnExB,EAAYmE,SAAQpD,GAAUA,EAAOpC,iBAAiB,WAAYiD,KAClE5B,EAAYmE,SAAQpD,GAAUA,EAAOpC,iBAAiB,YAAaoD,KACnE/B,EAAYmE,SAAQpD,GAAUA,EAAOpC,iBAAiB,YAAaqD,KACnEhC,EAAYmE,SAAQpD,GAAUA,EAAOpC,iBAAiB,OAAQsD,KAC9DjC,EAAYmE,SAAQpD,GAAUA,EAAOpC,iBAAiB,UAAW0E,KAMjEjE,EAAM+E,SAAQyB,GAAQA,EAAKjH,iBAAiB,aAAckD,IACxDR,EAA4BQ,EAAEgE,OAAO3E,EAAE,MAiHzC,IAAI4E,EAAiB,EACjBC,EAAiB,EACjBC,EAAe,EACfC,EAAkB,EAClBC,EAAe,EAEnB,SAAS9B,EAAapB,GACpB,MAAMmD,EAAcjH,EAAaD,cAAc,gBAAgByB,OACzD0F,EAAMC,OAAOC,OAAOtD,GACrBmD,EAAYnD,UAAUuD,SAAS,SAA6B,SAAlBnG,GAA6BD,IACtEiG,EAAItD,SAAS,cAAcgD,IAC3BM,EAAItD,SAAS,cAAciD,IAC3BK,EAAItD,SAAS,YAAYkD,IACzBI,EAAItD,SAAS,eAAemD,IAC5BG,EAAItD,SAAS,YAAYoD,KAE3BE,EAAItD,SAAS,SACfqD,EAAYnD,UAAUC,IAAI,QAE1BkD,EAAYnD,UAAUC,IAAI,QAE5BuD,IACApG,EAAgB,QACA,iBAAbmE,UAA6BL,G,CAGlC,IAAIuC,EAAoB,EACpBC,EAAoB,EACpBC,EAAkB,EAClBC,EAAqB,EACrBC,EAAkB,EAGtB,SAASvC,EAAQvD,GAEf,GADiB,iBAAbwD,WAA6BxD,EAAS+F,KAAKC,MAAMD,KAAKE,SAAWhH,EAAY2B,SAC5E3B,EAAYe,GAAQiC,UAAUuD,SAAS,QASpB,iBAAbhC,UAA6BD,QATa,CACnD,MAAM2C,EAAMjH,EAAYe,GAAQiC,UAAUuD,SAAS,SACnDvG,EAAYe,GAAQiC,UAAUC,IAAIgE,EAAM,OAAS,QAC7CjH,EAAYe,GAAQiC,UAAUuD,SAAS,cAAcE,IACrDzG,EAAYe,GAAQiC,UAAUuD,SAAS,cAAcG,IACrD1G,EAAYe,GAAQiC,UAAUuD,SAAS,YAAYI,IACnD3G,EAAYe,GAAQiC,UAAUuD,SAAS,eAAeK,IACtD5G,EAAYe,GAAQiC,UAAUuD,SAAS,YAAYM,IACvDL,G,CAEFpG,EAAgB,OAChBP,EAAY+D,UAAY,UACxBlF,SAASmF,KAAKb,UAAUC,IAAI,WAC5BvE,SAASmF,KAAKb,UAAUc,OAAO,Y,CAGjC,SAAS0C,IACP,IAAIU,EAAQ,WACI,gBAAb3C,WAA4B2C,EAAQ,SAChB,IAAnBpB,IACFhG,EAAY8D,UAAY,gBAAgBsD,gBACxCpB,EAAiB,IAEI,IAAnBC,IACFjG,EAAY8D,UAAY,gBAAgBsD,gBACxCnB,EAAiB,IAEE,IAAjBC,IACFlG,EAAY8D,UAAY,gBAAgBsD,cACxClB,EAAe,IAEO,IAApBC,IACFnG,EAAY8D,UAAY,gBAAgBsD,iBACxCjB,EAAkB,IAEC,IAAjBC,IACFpG,EAAY8D,UAAY,gBAAgBsD,cACxChB,EAAe,IAES,IAAtBO,IACF3G,EAAY8D,UAAY,GAAGsD,wBAC3BT,EAAoB,IAEI,IAAtBC,IACF5G,EAAY8D,UAAY,GAAGsD,wBAC3BR,EAAoB,IAEE,IAApBC,IACF7G,EAAY8D,UAAY,GAAGsD,sBAC3BP,EAAkB,IAEO,IAAvBC,IACF9G,EAAY8D,UAAY,GAAGsD,yBAC3BN,EAAqB,IAEC,IAApBC,IACF/G,EAAY8D,UAAY,GAAGsD,sBAC3BL,EAAkB,IAGhBf,EAAkBC,EAAiBC,EAAeC,EAAkBC,IAAkB,KACxFpG,EAAY8D,UAAY,qDACxBuD,MAEEV,EAAqBC,EAAoBC,EAAkBC,EAAqBC,IAAqB,KACvG/G,EAAY8D,UAAY,GAAGsD,EAAME,+DACjCD,K,CAIJ,SAASA,KACPhH,GAAa,EACbR,EAAY0H,oBAAoB,QAASnD,E","sources":["app/public/app.js"],"sourcesContent":["document.addEventListener('DOMContentLoaded', () => {\n  const chatTextInput = document.getElementById('chatTextInput')\n  const chatTextSend = document.getElementById('chatTextSend')\n  const chatTextForm = document.getElementById('chatTextForm')\n\n  const userGrid = document.querySelector('.grid-user')\n  const computerGrid = document.querySelector('.grid-computer')\n  const displayGrid = document.querySelector('.grid-display')\n  const ships = document.querySelectorAll('.ship')\n  const destroyer = document.querySelector('.destroyer-container')\n  const submarine = document.querySelector('.submarine-container')\n  const cruiser = document.querySelector('.cruiser-container')\n  const battleship = document.querySelector('.battleship-container')\n  const carrier = document.querySelector('.carrier-container')\n  const startButton = document.querySelector('#start')\n  const rotateButton = document.querySelector('#rotate')\n  const turnDisplay = document.querySelector('#whose-go')\n  const infoDisplay = document.querySelector('#info')\n  const setupButtons = document.getElementById('setup-buttons')\n  const userSquares = []\n  const computerSquares = []\n  let isHorizontal = true\n  let isGameOver = false\n  let currentPlayer = 'user'\n  const width = 10\n  let playerNum = 0\n  let ready = false\n  let enemyReady = false\n  let allShipsPlaced = false\n  let shotFired = -1\n  //Ships\n  const shipArray = [\n    {\n      name: 'destroyer',\n      directions: [\n        [0, 1],\n        [0, width]\n      ]\n    },\n    {\n      name: 'submarine',\n      directions: [\n        [0, 1, 2],\n        [0, width, width*2]\n      ]\n    },\n    {\n      name: 'cruiser',\n      directions: [\n        [0, 1, 2],\n        [0, width, width*2]\n      ]\n    },\n    {\n      name: 'battleship',\n      directions: [\n        [0, 1, 2, 3],\n        [0, width, width*2, width*3]\n      ]\n    },\n    {\n      name: 'carrier',\n      directions: [\n        [0, 1, 2, 3, 4],\n        [0, width, width*2, width*3, width*4]\n      ]\n    },\n  ]\n\n  createBoard(userGrid, userSquares)\n  createBoard(computerGrid, computerSquares)\n\n  // Select Player Mode\n  if (gameMode === 'singlePlayer') {\n    startSinglePlayer()\n  } else {\n    startMultiPlayer()\n  }\n\n  // Multiplayer\n  function startMultiPlayer() {\n    // const socket = io('ws://' + window.location.host + '/socket');\n    // FIXME\n    const socket = io('ws://' + window.location.hostname + ':1235');\n\n    console.info('startMultiPlayer() has been called')\n\n    chatTextForm.addEventListener('submit', event => {\n      event.preventDefault();\n    })\n\n    chatTextSend.addEventListener('click', event => {\n      socket.emit('game-message', chatTextInput.value)\n      chatTextInput.value = ''\n    })\n\n\n    // Get your player number\n    socket.on('player-number', num => {\n      if (num === -1) {\n        infoDisplay.innerHTML = \"Sorry, the server is full\"\n      } else {\n        playerNum = parseInt(num)\n        if(playerNum === 1) currentPlayer = \"enemy\"\n\n        console.log(playerNum)\n\n        // Get other player status\n        socket.emit('check-players')\n      }\n    })\n\n    // Another player has connected or disconnected\n    socket.on('player-connection', num => {\n      console.log(`Player number ${num} has connected or disconnected`)\n      playerConnectedOrDisconnected(num)\n    })\n\n    // On enemy ready\n    socket.on('enemy-ready', num => {\n      enemyReady = true\n      playerReady(num)\n      if (ready) {\n        playGameMulti(socket)\n        setupButtons.style.display = 'none'\n      }\n    })\n\n    // Check player status\n    socket.on('check-players', players => {\n      players.forEach((p, i) => {\n        if(p.connected) playerConnectedOrDisconnected(i)\n        if(p.ready) {\n          playerReady(i)\n          if(i !== playerReady) enemyReady = true\n        }\n      })\n    })\n\n    // On Timeout\n    socket.on('timeout', () => {\n      infoDisplay.innerHTML = 'You have reached the 10 minute limit! To play again <a href=\\\"/\\\">click here</a>!'\n    })\n\n    socket.on('game-message-broadcast', (data) => {\n      const chatBox = document.querySelector('.player.chat')\n      chatBox.innerText = `Enemy: ${data}`\n      setTimeout(() => chatBox.innerText = '', 2500)\n    })\n\n    // Ready button click\n    startButton.addEventListener('click', () => {\n      if(allShipsPlaced) {\n        infoDisplay.innerHTML = \"\"\n        playGameMulti(socket)\n      }\n      else infoDisplay.innerHTML = \"Please place all ships in the upper left frame 👇\"\n    })\n\n    // Setup event listeners for firing\n    computerSquares.forEach(square => {\n      square.addEventListener('click', () => {\n        if(currentPlayer === 'user' && ready && enemyReady) {\n          shotFired = square.dataset.id\n          socket.emit('fire', shotFired)\n        }\n      })\n    })\n\n    // On Fire Received\n    socket.on('fire', id => {\n      enemyGo(id)\n      const square = userSquares[id]\n      socket.emit('fire-reply', square.classList)\n      playGameMulti(socket)\n    })\n\n    // On Fire Reply Received\n    socket.on('fire-reply', classList => {\n      revealSquare(classList)\n      playGameMulti(socket)\n    })\n\n    function playerConnectedOrDisconnected(num) {\n      let player = `.p${parseInt(num) + 1}`\n      document.querySelector(`${player} .connected`).classList.toggle('active')\n      if(parseInt(num) === playerNum) document.querySelector(player).style.fontWeight = 'bold'\n    }\n  }\n\n  // // Single Player\n  // function startSinglePlayer() {\n  //   generate(shipArray[0])\n  //   generate(shipArray[1])\n  //   generate(shipArray[2])\n  //   generate(shipArray[3])\n  //   generate(shipArray[4])\n\n  //   startButton.addEventListener('click', () => {\n  //     setupButtons.style.display = 'none'\n  //     playGameSingle()\n  //   })\n  // }\n\n  //Create Board\n  function createBoard(grid, squares) {\n    for (let i = 0; i < width*width; i++) {\n      const square = document.createElement('div')\n      square.dataset.id = i\n      grid.appendChild(square)\n      squares.push(square)\n    }\n  }\n\n  //Draw the computers ships in random locations\n  function generate(ship) {\n    let randomDirection = Math.floor(Math.random() * ship.directions.length)\n    let current = ship.directions[randomDirection]\n    if (randomDirection === 0) direction = 1\n    if (randomDirection === 1) direction = 10\n    let randomStart = Math.abs(Math.floor(Math.random() * computerSquares.length - (ship.directions[0].length * direction)))\n\n    const isTaken = current.some(index => computerSquares[randomStart + index].classList.contains('taken'))\n    const isAtRightEdge = current.some(index => (randomStart + index) % width === width - 1)\n    const isAtLeftEdge = current.some(index => (randomStart + index) % width === 0)\n\n    if (!isTaken && !isAtRightEdge && !isAtLeftEdge) current.forEach(index => computerSquares[randomStart + index].classList.add('taken', ship.name))\n\n    else generate(ship)\n  }\n\n\n  //Rotate the ships\n  function rotate() {\n    if (isHorizontal) {\n      destroyer.classList.toggle('destroyer-container-vertical')\n      submarine.classList.toggle('submarine-container-vertical')\n      cruiser.classList.toggle('cruiser-container-vertical')\n      battleship.classList.toggle('battleship-container-vertical')\n      carrier.classList.toggle('carrier-container-vertical')\n      isHorizontal = false\n      // console.log(isHorizontal)\n      return\n    }\n    if (!isHorizontal) {\n      destroyer.classList.toggle('destroyer-container-vertical')\n      submarine.classList.toggle('submarine-container-vertical')\n      cruiser.classList.toggle('cruiser-container-vertical')\n      battleship.classList.toggle('battleship-container-vertical')\n      carrier.classList.toggle('carrier-container-vertical')\n      isHorizontal = true\n      // console.log(isHorizontal)\n      return\n    }\n  }\n  rotateButton.addEventListener('click', rotate)\n\n  //move around user ship\n  ships.forEach(ship => ship.addEventListener('dragstart', dragStart))\n  userSquares.forEach(square => square.addEventListener('dragstart', dragStart))\n  userSquares.forEach(square => square.addEventListener('dragover', dragOver))\n  userSquares.forEach(square => square.addEventListener('dragenter', dragEnter))\n  userSquares.forEach(square => square.addEventListener('dragleave', dragLeave))\n  userSquares.forEach(square => square.addEventListener('drop', dragDrop))\n  userSquares.forEach(square => square.addEventListener('dragend', dragEnd))\n\n  let selectedShipNameWithIndex\n  let draggedShip\n  let draggedShipLength\n\n  ships.forEach(ship => ship.addEventListener('mousedown', (e) => {\n    selectedShipNameWithIndex = e.target.id\n    // console.log(selectedShipNameWithIndex)\n  }))\n\n  function dragStart() {\n    draggedShip = this\n    draggedShipLength = this.childNodes.length\n    // console.log(draggedShip)\n  }\n\n  function dragOver(e) {\n    e.preventDefault()\n  }\n\n  function dragEnter(e) {\n    e.preventDefault()\n  }\n\n  function dragLeave() {\n    // console.log('drag leave')\n  }\n\n  function dragDrop() {\n    let shipNameWithLastId = draggedShip.lastChild.id\n    let shipClass = shipNameWithLastId.slice(0, -2)\n    // console.log(shipClass)\n    let lastShipIndex = parseInt(shipNameWithLastId.substr(-1))\n    let shipLastId = lastShipIndex + parseInt(this.dataset.id)\n    // console.log(shipLastId)\n    const notAllowedHorizontal = [0,10,20,30,40,50,60,70,80,90,1,11,21,31,41,51,61,71,81,91,2,22,32,42,52,62,72,82,92,3,13,23,33,43,53,63,73,83,93]\n    const notAllowedVertical = [99,98,97,96,95,94,93,92,91,90,89,88,87,86,85,84,83,82,81,80,79,78,77,76,75,74,73,72,71,70,69,68,67,66,65,64,63,62,61,60]\n\n    let newNotAllowedHorizontal = notAllowedHorizontal.splice(0, 10 * lastShipIndex)\n    let newNotAllowedVertical = notAllowedVertical.splice(0, 10 * lastShipIndex)\n\n    selectedShipIndex = parseInt(selectedShipNameWithIndex.substr(-1))\n\n    shipLastId = shipLastId - selectedShipIndex\n    // console.log(shipLastId)\n\n    if (isHorizontal && !newNotAllowedHorizontal.includes(shipLastId)) {\n      for (let i=0; i < draggedShipLength; i++) {\n        let directionClass\n        if (i === 0) directionClass = 'start'\n        if (i === draggedShipLength - 1) directionClass = 'end'\n        userSquares[parseInt(this.dataset.id) - selectedShipIndex + i].classList.add('taken', 'horizontal', directionClass, shipClass)\n      }\n    //As long as the index of the ship you are dragging is not in the newNotAllowedVertical array! This means that sometimes if you drag the ship by its\n    //index-1 , index-2 and so on, the ship will rebound back to the displayGrid.\n    } else if (!isHorizontal && !newNotAllowedVertical.includes(shipLastId)) {\n      for (let i=0; i < draggedShipLength; i++) {\n        let directionClass\n        if (i === 0) directionClass = 'start'\n        if (i === draggedShipLength - 1) directionClass = 'end'\n        userSquares[parseInt(this.dataset.id) - selectedShipIndex + width*i].classList.add('taken', 'vertical', directionClass, shipClass)\n      }\n    } else return\n\n    displayGrid.removeChild(draggedShip)\n    if(!displayGrid.querySelector('.ship')) allShipsPlaced = true\n  }\n\n  function dragEnd() {\n    // console.log('dragend')\n  }\n\n  // Game Logic for MultiPlayer\n  function playGameMulti(socket) {\n    setupButtons.style.display = 'none'\n    if(isGameOver) return\n    if(!ready) {\n      socket.emit('player-ready')\n      ready = true\n      playerReady(playerNum)\n    }\n\n    if(enemyReady) {\n      if(currentPlayer === 'user') {\n        turnDisplay.innerHTML = 'Your Go'\n        document.body.classList.add('your-go')\n        document.body.classList.remove('enemys-go')\n      }\n      if(currentPlayer === 'enemy') {\n        turnDisplay.innerHTML = \"Enemy's Go\"\n        document.body.classList.add('enemys-go')\n        document.body.classList.remove('your-go')\n      }\n    }\n  }\n\n  function playerReady(num) {\n    let player = `.p${parseInt(num) + 1}`\n    document.querySelector(`${player} .ready`).classList.toggle('active')\n  }\n\n  // Game Logic for Single Player\n  function playGameSingle() {\n    if (isGameOver) return\n    if (currentPlayer === 'user') {\n      turnDisplay.innerHTML = 'Your Go'\n      document.body.classList.add('your-go')\n      document.body.classList.remove('enemys-go')\n      computerSquares.forEach(square => square.addEventListener('click', function(e) {\n        shotFired = square.dataset.id\n        revealSquare(square.classList)\n      }))\n    }\n    if (currentPlayer === 'enemy') {\n      turnDisplay.innerHTML = 'Computers Go'\n      setTimeout(enemyGo, 1000)\n    }\n  }\n\n  let destroyerCount = 0\n  let submarineCount = 0\n  let cruiserCount = 0\n  let battleshipCount = 0\n  let carrierCount = 0\n\n  function revealSquare(classList) {\n    const enemySquare = computerGrid.querySelector(`div[data-id='${shotFired}']`)\n    const obj = Object.values(classList)\n    if (!enemySquare.classList.contains('boom') && currentPlayer === 'user' && !isGameOver) {\n      if (obj.includes('destroyer')) destroyerCount++\n      if (obj.includes('submarine')) submarineCount++\n      if (obj.includes('cruiser')) cruiserCount++\n      if (obj.includes('battleship')) battleshipCount++\n      if (obj.includes('carrier')) carrierCount++\n    }\n    if (obj.includes('taken')) {\n      enemySquare.classList.add('boom')\n    } else {\n      enemySquare.classList.add('miss')\n    }\n    checkForWins()\n    currentPlayer = 'enemy'\n    if(gameMode === 'singlePlayer') playGameSingle()\n  }\n\n  let cpuDestroyerCount = 0\n  let cpuSubmarineCount = 0\n  let cpuCruiserCount = 0\n  let cpuBattleshipCount = 0\n  let cpuCarrierCount = 0\n\n\n  function enemyGo(square) {\n    if (gameMode === 'singlePlayer') square = Math.floor(Math.random() * userSquares.length)\n    if (!userSquares[square].classList.contains('boom')) {\n      const hit = userSquares[square].classList.contains('taken')\n      userSquares[square].classList.add(hit ? 'boom' : 'miss')\n      if (userSquares[square].classList.contains('destroyer')) cpuDestroyerCount++\n      if (userSquares[square].classList.contains('submarine')) cpuSubmarineCount++\n      if (userSquares[square].classList.contains('cruiser')) cpuCruiserCount++\n      if (userSquares[square].classList.contains('battleship')) cpuBattleshipCount++\n      if (userSquares[square].classList.contains('carrier')) cpuCarrierCount++\n      checkForWins()\n    } else if (gameMode === 'singlePlayer') enemyGo()\n    currentPlayer = 'user'\n    turnDisplay.innerHTML = 'Your Go'\n    document.body.classList.add('your-go')\n    document.body.classList.remove('enemys-go')\n  }\n\n  function checkForWins() {\n    let enemy = 'computer'\n    if(gameMode === 'multiPlayer') enemy = 'enemy'\n    if (destroyerCount === 2) {\n      infoDisplay.innerHTML = `You sunk the ${enemy}'s destroyer`\n      destroyerCount = 10\n    }\n    if (submarineCount === 3) {\n      infoDisplay.innerHTML = `You sunk the ${enemy}'s submarine`\n      submarineCount = 10\n    }\n    if (cruiserCount === 3) {\n      infoDisplay.innerHTML = `You sunk the ${enemy}'s cruiser`\n      cruiserCount = 10\n    }\n    if (battleshipCount === 4) {\n      infoDisplay.innerHTML = `You sunk the ${enemy}'s battleship`\n      battleshipCount = 10\n    }\n    if (carrierCount === 5) {\n      infoDisplay.innerHTML = `You sunk the ${enemy}'s carrier`\n      carrierCount = 10\n    }\n    if (cpuDestroyerCount === 2) {\n      infoDisplay.innerHTML = `${enemy} sunk your destroyer`\n      cpuDestroyerCount = 10\n    }\n    if (cpuSubmarineCount === 3) {\n      infoDisplay.innerHTML = `${enemy} sunk your submarine`\n      cpuSubmarineCount = 10\n    }\n    if (cpuCruiserCount === 3) {\n      infoDisplay.innerHTML = `${enemy} sunk your cruiser`\n      cpuCruiserCount = 10\n    }\n    if (cpuBattleshipCount === 4) {\n      infoDisplay.innerHTML = `${enemy} sunk your battleship`\n      cpuBattleshipCount = 10\n    }\n    if (cpuCarrierCount === 5) {\n      infoDisplay.innerHTML = `${enemy} sunk your carrier`\n      cpuCarrierCount = 10\n    }\n\n    if ((destroyerCount + submarineCount + cruiserCount + battleshipCount + carrierCount) === 50) {\n      infoDisplay.innerHTML = \"YOU WON! To play again <a href=\\\"/\\\">click here</a>!\"\n      gameOver()\n    }\n    if ((cpuDestroyerCount + cpuSubmarineCount + cpuCruiserCount + cpuBattleshipCount + cpuCarrierCount) === 50) {\n      infoDisplay.innerHTML = `${enemy.toUpperCase()} WON! To play again <a href=\\\"/\\\">click here</a>!`\n      gameOver()\n    }\n  }\n\n  function gameOver() {\n    isGameOver = true\n    startButton.removeEventListener('click', playGameSingle)\n  }\n})\n"],"names":["document","addEventListener","chatTextInput","getElementById","chatTextSend","chatTextForm","userGrid","querySelector","computerGrid","displayGrid","ships","querySelectorAll","destroyer","submarine","cruiser","battleship","carrier","startButton","rotateButton","turnDisplay","infoDisplay","setupButtons","userSquares","computerSquares","isHorizontal","isGameOver","currentPlayer","width","playerNum","ready","enemyReady","allShipsPlaced","shotFired","createBoard","grid","squares","i","square","createElement","dataset","id","appendChild","push","selectedShipNameWithIndex","draggedShip","draggedShipLength","dragStart","this","childNodes","length","dragOver","e","preventDefault","dragEnter","dragLeave","dragDrop","shipNameWithLastId","lastChild","shipClass","slice","lastShipIndex","parseInt","substr","shipLastId","newNotAllowedHorizontal","splice","newNotAllowedVertical","selectedShipIndex","includes","directionClass","classList","add","i1","directionClass1","removeChild","dragEnd","playGameMulti","socket","style","display","emit","playerReady","innerHTML","body","remove","num","player","toggle","playGameSingle","forEach","revealSquare","setTimeout","enemyGo","gameMode","startSinglePlayer","io","window","location","hostname","playerConnectedOrDisconnected","fontWeight","console","info","event","value","on","log","players","p","connected","data","chatBox","innerText","startMultiPlayer","ship","target","destroyerCount","submarineCount","cruiserCount","battleshipCount","carrierCount","enemySquare","obj","Object","values","contains","checkForWins","cpuDestroyerCount","cpuSubmarineCount","cpuCruiserCount","cpuBattleshipCount","cpuCarrierCount","Math","floor","random","hit","enemy","gameOver","toUpperCase","removeEventListener"],"version":3,"file":"index.f5aefab9.js.map"}